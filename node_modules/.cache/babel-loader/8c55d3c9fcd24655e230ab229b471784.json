{"ast":null,"code":"import { auth, firebase, firebaseui } from '../../Firebase/firebase';\n\nconst SignInPage = () => {\n  // Initialize the FirebaseUI Widget using Firebase.\n  var ui = new firebaseui.auth.AuthUI(firebase.auth());\n  var uiConfig = {\n    callbacks: {\n      signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n        // User successfully signed in.\n        // Return type determines whether we continue the redirect automatically\n        // or whether we leave that to developer to handle.\n        return true;\n      },\n      uiShown: function () {\n        // The widget is rendered.\n        // Hide the loader.\n        document.getElementById('loader').style.display = 'none';\n      }\n    },\n    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n    signInFlow: 'popup',\n    signInSuccessUrl: '<url-to-redirect-to-on-success>',\n    signInOptions: [// Leave the lines as is for the providers you want to offer your users.\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID]\n  }; // The start method will wait until the DOM is loaded.\n\n  ui.start('#firebaseui-auth-container', uiConfig);\n};\n\nexport default SignInPage;","map":{"version":3,"sources":["/Users/sarafatih/aure-app/src/components/authentication/SignIn.js"],"names":["auth","firebase","firebaseui","SignInPage","ui","AuthUI","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","uiShown","document","getElementById","style","display","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","start"],"mappings":"AAAA,SAASA,IAAT,EAAeC,QAAf,EAAyBC,UAAzB,QAA2C,yBAA3C;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB;AACA,MAAIC,EAAE,GAAG,IAAIF,UAAU,CAACF,IAAX,CAAgBK,MAApB,CAA2BJ,QAAQ,CAACD,IAAT,EAA3B,CAAT;AACA,MAAIM,QAAQ,GAAG;AACbC,IAAAA,SAAS,EAAE;AACTC,MAAAA,2BAA2B,EAAE,UAAUC,UAAV,EAAsBC,WAAtB,EAAmC;AAC9D;AACA;AACA;AACA,eAAO,IAAP;AACD,OANQ;AAOTC,MAAAA,OAAO,EAAE,YAAY;AACnB;AACA;AACAC,QAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCC,OAAxC,GAAkD,MAAlD;AACD;AAXQ,KADE;AAcb;AACAC,IAAAA,UAAU,EAAE,OAfC;AAgBbC,IAAAA,gBAAgB,EAAE,iCAhBL;AAiBbC,IAAAA,aAAa,EAAE,CACb;AACAjB,IAAAA,QAAQ,CAACD,IAAT,CAAcmB,kBAAd,CAAiCC,WAFpB,EAGbnB,QAAQ,CAACD,IAAT,CAAcqB,iBAAd,CAAgCD,WAHnB;AAjBF,GAAf,CAHuB,CA0BvB;;AACAhB,EAAAA,EAAE,CAACkB,KAAH,CAAS,4BAAT,EAAuChB,QAAvC;AACD,CA5BD;;AA8BA,eAAeH,UAAf","sourcesContent":["import { auth, firebase, firebaseui } from '../../Firebase/firebase';\n\nconst SignInPage = () => {\n  // Initialize the FirebaseUI Widget using Firebase.\n  var ui = new firebaseui.auth.AuthUI(firebase.auth());\n  var uiConfig = {\n    callbacks: {\n      signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n        // User successfully signed in.\n        // Return type determines whether we continue the redirect automatically\n        // or whether we leave that to developer to handle.\n        return true;\n      },\n      uiShown: function () {\n        // The widget is rendered.\n        // Hide the loader.\n        document.getElementById('loader').style.display = 'none';\n      }\n    },\n    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n    signInFlow: 'popup',\n    signInSuccessUrl: '<url-to-redirect-to-on-success>',\n    signInOptions: [\n      // Leave the lines as is for the providers you want to offer your users.\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    ]\n  };\n  // The start method will wait until the DOM is loaded.\n  ui.start('#firebaseui-auth-container', uiConfig);\n}\n\nexport default SignInPage;\n\n"]},"metadata":{},"sourceType":"module"}