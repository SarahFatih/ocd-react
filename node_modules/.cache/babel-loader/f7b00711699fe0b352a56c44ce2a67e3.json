{"ast":null,"code":"var _jsxFileName = \"/Users/sarafatih/aure-app/src/components/authentication/SignIn.js\";\nimport { auth, firebase, firebaseui } from '../../Firebase/firebase';\nimport React from 'react';\nconst ui = new firebaseui.auth.AuthUI(firebase.auth());\n\nconst SignInPage = () => {\n  // Initialize the FirebaseUI Widget using Firebase.\n  var uiConfig = {\n    callbacks: {\n      signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n        // User successfully signed in.\n        // Return type determines whether we continue the redirect automatically\n        // or whether we leave that to developer to handle.\n        return true;\n      },\n      uiShown: function () {\n        // The widget is rendered.\n        // Hide the loader.\n        document.getElementById('loader').style.display = 'none';\n      }\n    },\n    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n    signInFlow: 'popup',\n    signInSuccessUrl: '<url-to-redirect-to-on-success>',\n    signInOptions: [// Leave the lines as is for the providers you want to offer your users.\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID]\n  }; // The start method will wait until the DOM is loaded.\n\n  ui.start('#firebaseui-auth-container', uiConfig);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"firebaseui-auth-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    id: \"loader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Loading...\"));\n};\n\nexport default SignInPage;","map":{"version":3,"sources":["/Users/sarafatih/aure-app/src/components/authentication/SignIn.js"],"names":["auth","firebase","firebaseui","React","ui","AuthUI","SignInPage","uiConfig","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","uiShown","document","getElementById","style","display","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","start"],"mappings":";AAAA,SAASA,IAAT,EAAeC,QAAf,EAAyBC,UAAzB,QAA2C,yBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,EAAE,GAAG,IAAIF,UAAU,CAACF,IAAX,CAAgBK,MAApB,CAA2BJ,QAAQ,CAACD,IAAT,EAA3B,CAAX;;AAEA,MAAMM,UAAU,GAAG,MAAM;AACvB;AACA,MAAIC,QAAQ,GAAG;AACbC,IAAAA,SAAS,EAAE;AACTC,MAAAA,2BAA2B,EAAE,UAAUC,UAAV,EAAsBC,WAAtB,EAAmC;AAC9D;AACA;AACA;AACA,eAAO,IAAP;AACD,OANQ;AAOTC,MAAAA,OAAO,EAAE,YAAY;AACnB;AACA;AACAC,QAAAA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCC,OAAxC,GAAkD,MAAlD;AACD;AAXQ,KADE;AAcb;AACAC,IAAAA,UAAU,EAAE,OAfC;AAgBbC,IAAAA,gBAAgB,EAAE,iCAhBL;AAiBbC,IAAAA,aAAa,EAAE,CACb;AACAlB,IAAAA,QAAQ,CAACD,IAAT,CAAcoB,kBAAd,CAAiCC,WAFpB,EAGbpB,QAAQ,CAACD,IAAT,CAAcsB,iBAAd,CAAgCD,WAHnB;AAjBF,GAAf,CAFuB,CAyBvB;;AACAjB,EAAAA,EAAE,CAACmB,KAAH,CAAS,4BAAT,EAAuChB,QAAvC;AACA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,EAAE,EAAC,2BAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAK,IAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CADF;AAMD,CAjCD;;AAmCA,eAAeD,UAAf","sourcesContent":["import { auth, firebase, firebaseui } from '../../Firebase/firebase';\nimport React from 'react';\nconst ui = new firebaseui.auth.AuthUI(firebase.auth());\n\nconst SignInPage = () => {\n  // Initialize the FirebaseUI Widget using Firebase.\n  var uiConfig = {\n    callbacks: {\n      signInSuccessWithAuthResult: function (authResult, redirectUrl) {\n        // User successfully signed in.\n        // Return type determines whether we continue the redirect automatically\n        // or whether we leave that to developer to handle.\n        return true;\n      },\n      uiShown: function () {\n        // The widget is rendered.\n        // Hide the loader.\n        document.getElementById('loader').style.display = 'none';\n      }\n    },\n    // Will use popup for IDP Providers sign-in flow instead of the default, redirect.\n    signInFlow: 'popup',\n    signInSuccessUrl: '<url-to-redirect-to-on-success>',\n    signInOptions: [\n      // Leave the lines as is for the providers you want to offer your users.\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    ]\n  };\n  // The start method will wait until the DOM is loaded.\n  ui.start('#firebaseui-auth-container', uiConfig);\n  return (\n    <div>\n      <div id=\"firebaseui-auth-container\"></div>\n      <div id=\"loader\">Loading...</div>\n    </div>\n  );\n}\n\nexport default SignInPage;\n\n"]},"metadata":{},"sourceType":"module"}